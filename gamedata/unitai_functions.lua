--- unitai_functions => used by unitai_auto_assist and unitai_auto_harvest
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Breno.
--- DateTime: 16-Apr-22 10:24 PM
---

GaiaTeamID = Spring.GetGaiaTeamID()
local defaultOreTowerRange = 330
local spGetFeatureResources = Spring.GetFeatureResources
local spGetUnitHealth   = Spring.GetUnitHealth
local spGetUnitSeparation = Spring.GetUnitSeparation
local spGetFullBuildQueue = Spring.GetFullBuildQueue --use this only for factories, to ignore rally points
local spGetUnitPosition = Spring.GetUnitPosition
local spGetUnitDefID = Spring.GetUnitDefID

local function sqrDistance(x1,z1,x2,z2)
    local dx,dz = x1-x2,z1-z2
    return dx*dx + dz*dz
end

local function hasBuildQueue(unitID)
    local buildqueue = spGetFullBuildQueue(unitID) -- => nil | buildOrders = { [1] = { [number unitDefID] = number count }, ... } }
    --spEcho("build queue size: "..(buildqueue and #buildqueue or "N/A"))
    if buildqueue then
        return #buildqueue > 0
    else
        return false
    end
end

function getNearestUID (ud)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, ud.radius,
            function(x) return (x.customParams.isorechunk == nil) end,
            function(x)
                local health,maxHealth = spGetUnitHealth(x)
                if not health or not maxHealth then
                    return nil end
                return (health < (maxHealth * 0.99)) end)
end

function getNearestRepairableID (ud)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, ud.radius,
            function(x) return (x.customParams.isorechunk == nil) end ,
            function(x)
                local health,maxHealth,_,_,done = spGetUnitHealth(x)
                if not health or not maxHealth then
                    return nil
                end
                return done and health < (maxHealth * 0.99) end )
end

function getNearestFeatureID (ud)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, ud.radius, nil, nil, true)
end

function getNearestChunkID (ud)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, ud.harvestRange,
            function(x) return (x.customParams and x.customParams.isorechunk) end, --unitDef check
            nil, false, GaiaTeamID)
end

function getOreTowerCollectRange(parentOreTowerID, oreTowers)
    return oreTowers[parentOreTowerID] or nil
end

function getFarFromOreTower (unitID, oreTowerCollectRange, nearestOreTowerID)
    return oreTowerCollectRange and spGetUnitSeparation(unitID, nearestOreTowerID, false) > oreTowerCollectRange or false
end

--function getFarFromOreTower (ud)
--    local otx, oty, otz
--    if ud.parentOreTowerID then
--        otx,oty,otz = spGetUnitPosition(ud.parentOreTowerID)
--    end
--    local farFromOreTower = true
--    if otx and otz then
--        local sqrOreTowerRange = getOreTowerRange(ud.parentOreTowerID)
--        sqrOreTowerRange = sqrOreTowerRange * sqrOreTowerRange
--        farFromOreTower = sqrDistance(ud.pos.x, ud.pos.z, otx, otz) > sqrOreTowerRange
--    end
--end

function getNearestFactoryID (ud)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, ud.radius,
            function(x) return x.isFactory end,     --We're only interested in factories currently producing
            function(x) return hasBuildQueue(x) end)
end

function getNearestMetalID (ud)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, ud.radius, nil,
            function(x)
                local remainingMetal,_,remainingEnergy = spGetFeatureResources(x) --feature
                return remainingMetal and remainingEnergy and remainingMetal > remainingEnergy end,
            true)
end

function getNearestEnergyID(ud)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, ud.radius, nil, nil,true)
end

function getOreTowerRange(oreTowerID, unitDef)
    if not oreTowerID and not unitDef then
        return defaultOreTowerRange end
    if not unitDef then
        local unitDefID = spGetUnitDefID(oreTowerID)
        unitDef = UnitDefs[unitDefID]
    end
    if not unitDef.buildDistance then
        return defaultOreTowerRange
    end
    return unitDef.buildDistance
end

function getNearestOreTowerID (ud, oreTowers, maxOreTowerScanRange)
    return NearestItemAround(ud.unitID, ud.pos, ud.unitDef, maxOreTowerScanRange, nil,
            function(x) return (oreTowers and oreTowers[x] or nil) end) --,
end

function getParentOreTowerID (ud, harvesters)
    return harvesters[ud.unitID] and harvesters[ud.unitID].parentOreTowerID
end


----return: parentOreTowerID, nearestOreTowerID2
--function getOreTowerInfo(ud, harvesters, oreTowers, longScanRange)
--    local nearestOreTowerID = NearestItemAround(ud.unitID, ud.pos, ud.unitDef, longScanRange, nil,
--            function(x) return (oreTowers and oreTowers[x] or nil) end)
--
--    local parentOreTowerID = harvesters[ud.unitID].parentOreTowerID or nearestOreTowerID
--
--    return parentOreTowerID, nearestOreTowerID
--end