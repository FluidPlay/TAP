#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2, turret, head, missiletop, missilebot, missilespawntop, missilespawnbot, aim;
//rocket1, rocket2, rocket3, turret, gun1, gun2, gun3;

static-var  gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	dont-cache turret;
	dont-shade turret;
//	dont-cache gun1;
//	dont-shade gun1;
//	dont-cache gun2;
//	dont-shade gun2;
//	dont-cache gun3;
//	dont-shade gun3;
	dont-cache missiletop;
	dont-shade missiletop;
	dont-cache missilebot;
	dont-shade missilebot;	
	gun_1 = missilespawntop; //rocket1;
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	turn turret to y-axis heading speed <450.00000>;
	turn head to x-axis <0.00000> - pitch speed <450.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn head around x-axis;
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 3 ) //4
	{
		gun_1 = missilespawntop;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = aim; //turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = missilespawntop;
	}
	if( gun_1 == 2 )
	{
		piecenum = missilespawnbot;
	}
//	if( gun_1 == 3 )
//	{
//		piecenum = rocket3;
//	}
	return (0);
}


AimSecondary(heading, pitch)
{
	turn turret to y-axis heading speed <450.00000>;
	turn head to x-axis <0.00000> - pitch speed <450.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn head around x-axis;
	return (1);
}

FireSecondary()
{
	++gun_1;
	if( gun_1 == 3 ) //4
	{
		gun_1 = missilespawntop;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = aim;
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = missilespawntop;
	}
	if( gun_1 == 2 )
	{
		piecenum = missilespawnbot;
	}
//	if( gun_1 == 3 )
//	{
//		piecenum = rocket3;
//	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode base2 type BITMAPONLY | BITMAP2;
		explode head type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP3;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode base2 type FALL | BITMAP2;
		explode head type FALL | BITMAP3;
		explode turret type BITMAPONLY | BITMAP3;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode base2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type BITMAPONLY | BITMAP3;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode base2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode head type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type BITMAPONLY | BITMAP3;
	return (corpsetype);
}
