#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, turret, base, aimpiece,
       wheel4, gun1, gun4, gun2, gun3, turretbase;
       //wheel1, wheel2, wheel3, wheel5, wheel6

static-var  restore_delay, currentgun, gunid;

// Signal definitions
#define SIG_AIM_3			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	//spin wheel1 around x-axis speed <150.032967>;
	//spin wheel2 around x-axis speed <150.032967>;
	//spin wheel3 around x-axis speed <150.032967>;
	spin wheel4 around x-axis speed <150.032967>;
	//spin wheel5 around x-axis speed <150.032967>;
	//spin wheel6 around x-axis speed <150.032967>;
}

StopMoving()
{
	//stop-spin wheel1 around x-axis;
	//stop-spin wheel2 around x-axis;
	//stop-spin wheel3 around x-axis;
	stop-spin wheel4 around x-axis;
	//stop-spin wheel5 around x-axis;
	//stop-spin wheel6 around x-axis;
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide aimpiece; //new
	currentgun = gun1; //flare1
	gunid = 0;
	restore_delay = 5000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 5000;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <600.000000>;
	turn turret to x-axis <0.000000> speed <600.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turretbase to y-axis heading speed <650.000000>; //turret
	turn turret to x-axis <0.000000> - pitch speed <600.000000>;
	wait-for-turn turretbase around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
//	if( currentgun == 0 )
//	{
//		move gun1 to z-axis [-4.000000] now;
//		show flare1;
//		sleep 150;
//		hide flare1;
//		move gun1 to z-axis [0.000000] speed [15.000000];
//	}
//	if( currentgun == 1 )
//	{
//		move gun4 to z-axis [-4.000000] now;
//		show flare4;
//		sleep 150;
//		hide flare4;
//		move gun4 to z-axis [0.000000] speed [15.000000];
//	}
//	if( currentgun == 2 )
//	{
//		move gun2 to z-axis [-4.000000] now;
//		show flare2;
//		sleep 150;
//		hide flare2;
//		move gun2 to z-axis [0.000000] speed [15.000000];
//	}
//	if( currentgun == 3 )
//	{
//		move gun3 to z-axis [-4.000000] now;
//		show flare3;
//		sleep 150;
//		hide flare3;
//		move gun3 to z-axis [0.000000] speed [15.000000];
//	}
	if( gunid == 0 )
	{
		move gun1 to z-axis [-4.000000] now;
		move gun2 to z-axis [-4.000000] now;		
		sleep 150;
		move gun1 to z-axis [0.000000] speed [15.000000];
		move gun2 to z-axis [0.000000] speed [15.000000];
	}
	if( gunid == 1 )
	{
		move gun3 to z-axis [-4.000000] now;
		move gun4 to z-axis [-4.000000] now;
		sleep 150;
		move gun3 to z-axis [0.000000] speed [15.000000];
		move gun4 to z-axis [0.000000] speed [15.000000];				
	}

	sleep 50;
	++gunid;
	if( gunid == 2 )
	{
		gunid = 0;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turretbase to y-axis heading speed <650.000000>; //turret
	turn turret to x-axis <0.000000> - pitch speed <600.000000>;
	wait-for-turn turretbase around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gunid == 0 )
	{
		move gun1 to z-axis [-4.000000] now;
		move gun2 to z-axis [-4.000000] now;		
		sleep 150;
		move gun1 to z-axis [0.000000] speed [15.000000];
		move gun2 to z-axis [0.000000] speed [15.000000];
	}
	if( gunid == 1 )
	{
		move gun3 to z-axis [-4.000000] now;
		move gun4 to z-axis [-4.000000] now;
		sleep 150;
		move gun3 to z-axis [0.000000] speed [15.000000];
		move gun4 to z-axis [0.000000] speed [15.000000];				
	}

	sleep 50;
	++gunid;
	if( gunid == 2 )
	{
		gunid = 0;
	}
}


//eg: barrel for QueryWeapon (end) and the turret for AimFromWeapon (base)

AimFromWeapon1(piecenum)
{
	if( gunid == 0 )
	{
		piecenum = gun2;
	}
	if( gunid == 1 )
	{
		piecenum = gun3;
	}
}

QueryWeapon1(piecenum)
{
	//piecenum = currentgun; //turret
	if( gunid == 0 )
	{
		piecenum = flare2;
	}
	if( gunid == 1 )
	{
		piecenum = flare3;
	}
}

//===

AimFromSecondary(piecenum)
{
	if( gunid == 0 )
	{
		piecenum = gun2;
	}
	if( gunid == 1 )
	{
		piecenum = gun3;
	}
}

QuerySecondary(piecenum)
{
	if( gunid == 0 )
	{
		piecenum = flare2;
	}
	if( gunid == 1 )
	{
		piecenum = flare3;
	}
}

//AimFromTertiary(piecenum)
//{
//	piecenum = turret;
//}

//QueryTertiary(piecenum)
//{
//	piecenum = currentgun;
//}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		explode turretbase type SHATTER | BITMAP4;
		explode wheel4 type SHATTER | BITMAP4;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return corpsetype;
}
