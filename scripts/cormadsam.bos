#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, Rlauncher, Rlauncherbase, rfp, Llauncher, Llauncherbase, lfp, turrettop;

static-var  shooting_num;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turrettop;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


Create() // tells it what to do on creation
{
	dont-shade base;
	dont-shade body;
	dont-shade turret;
	dont-shade Rlauncher;
	dont-shade Rlauncherbase;
	dont-shade rfp;
	dont-shade Llauncher;
	dont-shade Llauncherbase;
	dont-shade lfp;
	dont-shade turrettop;
	shooting_num=1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 2000;
	}
	start-script SmokeUnit();
}

RestoreAfterDelay() // restore function to turn the turret and so forth back to start
{
	sleep 3000;
	turn turret to y-axis <0> speed <60>;
	turn Llauncher to x-axis <0> speed <30>;
	turn Rlauncher to x-axis <0> speed <30>;
}

AimWeapon1(heading, pitch) // aiming animation and firing authorization
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <90>;
	turn Llauncher to x-axis <0> - pitch speed <60>;
	turn Rlauncher to x-axis <0> - pitch speed <60>;
	
	wait-for-turn turret around y-axis;
	wait-for-turn Llauncher around x-axis;
	wait-for-turn Rlauncher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets
{
	shooting_num=shooting_num+1;
	
    if( shooting_num == 3)
    {  
    	shooting_num=1;
    }
}

AimFromWeapon1(piecenum) // where it aims the weapon from
{
	piecenum = turret;
}

QueryWeapon1(piecenum) // where the shot is created at
{

	 if (shooting_num==1) 
     {  
     	piecenum=lfp;     
     }

     if (shooting_num==2)
     {   
     	piecenum=rfp;
     }
	
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		explode Rlauncherbase type SHATTER | NOHEATCLOUD;
		explode Llauncherbase type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode body type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode turret type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode Rlauncher type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode Rlauncherbase type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode rfp type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode Llauncher type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode Llauncherbase type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode lfp type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode turrettop type SHATTER | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode body type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode Rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode Rlauncherbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode lfp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode Llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode Llauncherbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode rfp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode turrettop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode body type SHATTER | BITMAP4 | NOHEATCLOUD;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode Rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode Rlauncherbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode rfp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode Llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode Llauncherbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode lfp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode turrettop type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	return (corpsetype);
}