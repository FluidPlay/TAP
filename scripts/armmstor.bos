#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, nano, pad;

static-var  statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE 2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	start-script SmokeUnit();
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;	
	return (0);
}

//==============
// Build stuff
//==============

QueryNanoPiece(piecenum)
{
	piecenum = nano;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			set YARD_OPEN to 0;
			set INBUILDSTANCE to 0;
			currentstate = 1;
		}
		else
		{
			set YARD_OPEN to 1;
			set INBUILDSTANCE to 1;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);	
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);	
}

StartBuilding()
{
	//spin pad around y-axis speed <0.000000>;
	start-script RequestState(0);
	return (0);
}

StopBuilding()
{
	//stop-spin pad around y-axis;
	start-script RequestState(1);
	return (0);	
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

//================

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (corpsetype);
}
